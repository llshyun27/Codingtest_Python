#피보나치 수열을 재귀함수로 표현 -> n이 커지면 수행시간이 기하급수적으로 늘어남
def fibo(x):
    if x==1 or x ==2:
        return 1
    return fibo(x-1)+fibo(x-2)
print(fibo(4))

#메모제이션 기법을 사용해서 해결(탑다운)
d = [0]*100   #한번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
def fibo(x):
    if x==1 or x==2:
        return 1   #종료 조건(1혹은 2일때 1을 반환)
    if d[x]!=0:
        return d[x]   #이미 계산한 적 있는 문제라면 그대로 반환
    d[x] = fibo(x-1) + fibo(x-2)  #아직 계산하지 않은 문제라면 점화식에 따라 피보나치 결과 반환
    return d[x]

print(fibo(99))

#재귀 함수를 이용하면 탑다운(큰문제->작은문제) 방식, 반복문을 이용하면 보텀업(작은문제부터 해결) 방식이라고 한다.
#반복문 사용(보텀업)
d = [0]*100
d[1]=1
d[2]=1
n=99

for i in range(3,n+1):
    d[i] = d[i-1]+d[i-2]

print(d[n])